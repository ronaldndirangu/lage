"use strict";(self.webpackChunktest_website=self.webpackChunktest_website||[]).push([[481],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,f=u["".concat(p,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},649:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3,title:"Scoped builds"},p="Scoped Builds",c={unversionedId:"Guide/scopes",id:"Guide/scopes",title:"Scoped builds",description:"Scoping a task runner can speed up the process especially if there are distinct clusters of packages that are not related to each other within the repository. lage has a scope option that allows the task running to proceed up to the packages found that matches the scope argument. This is a string matcher based on the name of the packages (not the package path).",source:"@site/docs/Guide/scopes.md",sourceDirName:"Guide",slug:"/Guide/scopes",permalink:"/lage/docs/Guide/scopes",editUrl:"https://github.com/microsoft/lage/docs/Guide/scopes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Scoped builds"},sidebar:"tutorialSidebar",previous:{title:"How does `lage` work?",permalink:"/lage/docs/Guide/levels"},next:{title:"Caching",permalink:"/lage/docs/Guide/cache"}},l=[{value:"Scoped builds with all its dependents",id:"scoped-builds-with-all-its-dependents",children:[],level:2},{value:"Scoped builds with no dependent &amp; their dependencies",id:"scoped-builds-with-no-dependent--their-dependencies",children:[],level:2}],d={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scoped-builds"},"Scoped Builds"),(0,o.kt)("p",null,"Scoping a task runner can speed up the process especially if there are distinct clusters of packages that are not related to each other within the repository. ",(0,o.kt)("inlineCode",{parentName:"p"},"lage")," has a ",(0,o.kt)("inlineCode",{parentName:"p"},"scope")," option that allows the task running to proceed up to the packages found that matches the ",(0,o.kt)("inlineCode",{parentName:"p"},"scope")," argument. This is a string matcher based on the name of the packages (not the package path)."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"It is important to note that depedendents and dependencies refer to the package & task.")),(0,o.kt)("h2",{id:"scoped-builds-with-all-its-dependents"},"Scoped builds with all its dependents"),(0,o.kt)("p",null,"By default, it is helpful to be able to run tasks on all affected packages within a scope. Packages that changed will affect downstream consumers. In this case, pass along the ",(0,o.kt)("inlineCode",{parentName:"p"},"scope")," to build all the dependencies as well."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: you can use wild card character: ",(0,o.kt)("inlineCode",{parentName:"p"},"*"),". This is particularly helpful when packages are named by group or by scope.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ lage build --scope *build-tools*\n")),(0,o.kt)("h2",{id:"scoped-builds-with-no-dependent--their-dependencies"},"Scoped builds with no dependent & their dependencies"),(0,o.kt)("p",null,"Sometimes we want to run the tasks needed to satisfy the ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," script of all the packages that has the ",(0,o.kt)("inlineCode",{parentName:"p"},"build-tools")," string in their names. Think of this as running tasks up and including the package matched in the scope. Simply add a ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-deps")," flag to run up to a package task."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ lage build --scope *build-tools* --no-deps\n")))}u.isMDXComponent=!0}}]);
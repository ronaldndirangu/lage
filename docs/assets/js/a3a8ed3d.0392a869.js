"use strict";(self.webpackChunktest_website=self.webpackChunktest_website||[]).push([[442],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),h=l,k=d["".concat(p,".").concat(h)]||d[h]||u[h]||i;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},793:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],o={sidebar_position:10,title:"CLI usage"},p="CLI usage",s={unversionedId:"Guide/cli",id:"Guide/cli",title:"CLI usage",description:"lage is meant to be run as a CLI. After installing lage inside the repository or globally, you can run the npm scripts from your repository like this:",source:"@site/docs/Guide/cli.md",sourceDirName:"Guide",slug:"/Guide/cli",permalink:"/lage/docs/Guide/cli",editUrl:"https://github.com/microsoft/lage/docs/Guide/cli.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"CLI usage"},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/lage/docs/Guide/config"},next:{title:"Migration Guide",permalink:"/lage/docs/Guide/migration"}},c=[{value:"Caching",id:"caching",children:[],level:2},{value:"Verbose",id:"verbose",children:[],level:2},{value:"Options",id:"options",children:[{value:"CliOptions",id:"clioptions",children:[{value:"cache",id:"cache",children:[],level:4},{value:"command",id:"command",children:[],level:4},{value:"concurrency",id:"concurrency",children:[],level:4},{value:"deps",id:"deps",children:[],level:4},{value:"grouped",id:"grouped",children:[],level:4},{value:"ignore",id:"ignore",children:[],level:4},{value:"include-dependencies",id:"include-dependencies",children:[],level:4},{value:"node",id:"node",children:[],level:4},{value:"only",id:"only",children:[],level:4},{value:"profile",id:"profile",children:[],level:4},{value:"reporter",id:"reporter",children:[],level:4},{value:"resetCache",id:"resetcache",children:[],level:4},{value:"scope",id:"scope",children:[],level:4},{value:"since",id:"since",children:[],level:4},{value:"to",id:"to",children:[],level:4},{value:"verbose",id:"verbose-1",children:[],level:4},{value:"safe-exit",id:"safe-exit",children:[],level:4}],level:3}],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cli-usage"},"CLI usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"lage")," is meant to be run as a CLI. After installing ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," inside the repository or globally, you can run the npm scripts from your repository like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ lage build\n")),(0,i.kt)("h2",{id:"caching"},"Caching"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"lage")," by default will skip tasks that it has already done recently. As long as the source file and the command called to ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," has not changed, those packages will be skipped. Sometimes, this incremental behavior is not desired. You can override the caching behavior by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"no-cache")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ lage build --no-cache\n")),(0,i.kt)("h2",{id:"verbose"},"Verbose"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"lage")," by default will hide the output from successful tasks. If you want to see the output as they are being generated, call ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"verbose")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ lage build --verbose\n")),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("h3",{id:"clioptions"},"CliOptions"),(0,i.kt)("h4",{id:"cache"},"cache"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"default: true, --no-cache will skip fetching cache or saving cache"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"lage")," by default will skip tasks that it has already done recently. As long as the source file and the command called to ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," has not changed, those packages will be skipped. Sometimes, this incremental behavior is not desired. You can override the caching behavior by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"no-cache")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ lage build --no-cache\n")),(0,i.kt)("h4",{id:"command"},"command"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: string[]")),(0,i.kt)("p",null,"positional arguments that specify which tasks to run"),(0,i.kt)("p",null,"Commands are collected as an array like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"lage build test bundle\n")),(0,i.kt)("p",null,"This will tell ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," to execute all three commands against all the packages"),(0,i.kt)("h4",{id:"concurrency"},"concurrency"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: number")),(0,i.kt)("p",null,"number of parallel tasks that can be run at a time"),(0,i.kt)("p",null,"By default, this is the number of CPU cores detected by ",(0,i.kt)("inlineCode",{parentName:"p"},"os.cpus().length"),",\nchange to any number to achieve desired concurrency."),(0,i.kt)("h4",{id:"deps"},"deps"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"default: true, --no-deps will skip dependent packages and tasks"),(0,i.kt)("p",null,"This has the semantic of running tasks up to what is specified in the command line\nsuch as with ",(0,i.kt)("inlineCode",{parentName:"p"},"--scope")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--since")),(0,i.kt)("h4",{id:"grouped"},"grouped"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"Specify whether to make the console logger to group the logs per package task"),(0,i.kt)("p",null,"Example: ",(0,i.kt)("inlineCode",{parentName:"p"},"lage --grouped")),(0,i.kt)("h4",{id:"ignore"},"ignore"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: string[]")),(0,i.kt)("p",null,"Ignores certain files when calculating the scope with ",(0,i.kt)("inlineCode",{parentName:"p"},"--since")),(0,i.kt)("p",null,"Certain files might need to be changed during the preparation of a build\njob. In that situation, ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," can ignore those files when calculating what\nhas changed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--since")," flag."),(0,i.kt)("h4",{id:"include-dependencies"},"include-dependencies"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,'Include all transitive dependencies when running a command(s).\nThis is useful for situations where you want to "set up" a package that relies on other packages being set up.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"lage setup --scope my-package --include-dependencies\n# my-package and all of its dependencies will be setup\n")),(0,i.kt)("h4",{id:"node"},"node"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: string[]")),(0,i.kt)("p",null,"node arguments to be passed into the npm lifecycle scripts"),(0,i.kt)("p",null,"For example:"),(0,i.kt)("p",null,"To increase the amount of memory to use for the npm tasks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'lage --node="--max_old_space_size=8192"\n')),(0,i.kt)("h4",{id:"only"},"only"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"only run the commands, do not consider dependent tasks"),(0,i.kt)("p",null,"For example, if ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," depends on ",(0,i.kt)("inlineCode",{parentName:"p"},"build"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," will always run ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," before ",(0,i.kt)("inlineCode",{parentName:"p"},"test"),"."),(0,i.kt)("p",null,"You can type this ",(0,i.kt)("inlineCode",{parentName:"p"},"lage test --only")," to skip running ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," task altogether. This is much\nlike what is the default of ",(0,i.kt)("inlineCode",{parentName:"p"},"lerna")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"rush"),"."),(0,i.kt)("h4",{id:"profile"},"profile"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"Creates a flamegraph-profile JSON for Chromium-based devtool"),(0,i.kt)("p",null,"Pay attention to the output summary to find the location of the JSON file."),(0,i.kt)("h4",{id:"reporter"},"reporter"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: string")),(0,i.kt)("p",null,"Specify whether to use the JSON Reporter to create a parsable log output"),(0,i.kt)("p",null,"Example: ",(0,i.kt)("inlineCode",{parentName:"p"},"lage --reporter json")),(0,i.kt)("h4",{id:"resetcache"},"resetCache"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"--reset-cache will skip fetching cache, but will overwrite cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"lage --reset-cache\n")),(0,i.kt)("p",null,"Will always run the tasks, while reseting the saved cache"),(0,i.kt)("h4",{id:"scope"},"scope"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: string[]")),(0,i.kt)("p",null,"Which specific packages to consider as in scope for the run"),(0,i.kt)("p",null,'This act as the "entry point" of the package-task graph traversal. To prevent\nrunning tasks for dependent package, use the ',(0,i.kt)("inlineCode",{parentName:"p"},"--no-deps")," flag in combination."),(0,i.kt)("p",null,"You can specify multiple scoped packages like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"lage build --scope foo --scope bar --scope baz\n")),(0,i.kt)("h4",{id:"since"},"since"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: string")),(0,i.kt)("p",null,"calculate which packages are in scope based on changed packages since a mergebase"),(0,i.kt)("p",null,"This uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"git diff ${target_branch}...")," mechanism to identify which packages\nhave changed. There is an assumption of all the input files for a package exist\ninside their respective package folders."),(0,i.kt)("h4",{id:"to"},"to"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: string[]")),(0,i.kt)("p",null,"Scopes a list of packages, and not built their dependents (consuming packages).\nThis implies ",(0,i.kt)("inlineCode",{parentName:"p"},"--scope")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-deps"),"."),(0,i.kt)("p",null,"Just like the ",(0,i.kt)("inlineCode",{parentName:"p"},"--scope")," argument, you can specify multiple packages like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"lage build --to foo --to bar\n")),(0,i.kt)("h4",{id:"verbose-1"},"verbose"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"Verbose mode, turns on all logging"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"lage")," by default will hide the output from successful tasks. If you want to see the\noutput as they are being generated, call ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"verbose")," argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ lage build --verbose\n")),(0,i.kt)("h4",{id:"safe-exit"},"safe-exit"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"type: boolean")),(0,i.kt)("p",null,"Runs currently executing tasks to completion before exiting.\nThis prevents the risk of having orphaned child processes running after\n",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," has exited."))}d.isMDXComponent=!0}}]);